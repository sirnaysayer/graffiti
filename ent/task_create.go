// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"graffiti/ent/task"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	activity   *string
	created_at *time.Time
	updated_at *time.Time
	state      *task.State
}

// SetActivity sets the activity field.
func (tc *TaskCreate) SetActivity(s string) *TaskCreate {
	tc.activity = &s
	return tc
}

// SetCreatedAt sets the created_at field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.created_at = &t
	return tc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the updated_at field.
func (tc *TaskCreate) SetUpdatedAt(t time.Time) *TaskCreate {
	tc.updated_at = &t
	return tc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetState sets the state field.
func (tc *TaskCreate) SetState(t task.State) *TaskCreate {
	tc.state = &t
	return tc
}

// SetNillableState sets the state field if the given value is not nil.
func (tc *TaskCreate) SetNillableState(t *task.State) *TaskCreate {
	if t != nil {
		tc.SetState(*t)
	}
	return tc
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	if tc.activity == nil {
		return nil, errors.New("ent: missing required field \"activity\"")
	}
	if tc.created_at == nil {
		v := task.DefaultCreatedAt()
		tc.created_at = &v
	}
	if tc.updated_at == nil {
		v := task.DefaultUpdatedAt()
		tc.updated_at = &v
	}
	if tc.state == nil {
		v := task.DefaultState
		tc.state = &v
	}
	if err := task.StateValidator(*tc.state); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"state\": %v", err)
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	var (
		t     = &Task{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: task.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: task.FieldID,
			},
		}
	)
	if value := tc.activity; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: task.FieldActivity,
		})
		t.Activity = *value
	}
	if value := tc.created_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: task.FieldCreatedAt,
		})
		t.CreatedAt = *value
	}
	if value := tc.updated_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: task.FieldUpdatedAt,
		})
		t.UpdatedAt = *value
	}
	if value := tc.state; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: task.FieldState,
		})
		t.State = *value
	}
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	t.ID = int(id)
	return t, nil
}
